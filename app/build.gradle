apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion buildConfig.compileSdkVersion

    defaultConfig {
        applicationId buildConfig.applicationId
        minSdkVersion buildConfig.minSdkVersion
        targetSdkVersion buildConfig.targetSdkVersion
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        testInstrumentationRunner buildConfig.testInstrumentationRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildToolsVersion buildConfig.buildToolsVersion

    testOptions {
        animationsDisabled = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation project(':presentation')
    implementation project(':di')

    // Library dependencies
    implementation libraryDependencies.koinCore
    implementation libraryDependencies.koinExt

    // Android dependencies
    implementation androidDependencies.timber
    implementation androidDependencies.koinAndroid
    implementation androidDependencies.koinAndroidViewModel
    implementation androidDependencies.androidxAppcompat
    implementation androidDependencies.androidxConstraintlayout
    implementation androidDependencies.androidxViewPager2
    implementation androidDependencies.androidxFragment
    implementation androidDependencies.androidMaterial
    implementation androidDependencies.glide
    implementation androidDependencies.glideAnnotationProcessor
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'

    // Test
    testImplementation testDependencies.junit

    // Android Test
    androidTestImplementation testDependencies.junit
    androidTestImplementation androidTestDependencies.androidxTestJunit
    androidTestImplementation androidTestDependencies.androidxTestCore
    androidTestImplementation (androidTestDependencies.mockitoAndroid) { exclude module: 'objenesis' }
    androidTestImplementation testDependencies.objenesis
    androidTestImplementation(androidTestDependencies.koinTest) { exclude group: 'org.mockito' }

    // Espresso dependencies
    androidTestImplementation androidTestDependencies.androidxTestEspressoCore
    androidTestImplementation androidTestDependencies.androidxTestEspressoContrib
}

jacoco {
    toolVersion = jacocoVersion
}

task testApp(dependsOn: [':app:testDebugUnitTest', ':app:connectedDebugAndroidTest']) {
    group = 'Test'
    description = "Run app tests"
}

task jacocoTestReportApp(type: JacocoReport, dependsOn: [
        'testApp',
        'createDebugCoverageReport'
]) {
    group = 'Test'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugJava = fileTree(dir: "${buildDir}/intermediates/classes/debugUnitTest", excludes: fileFilter)
    def debugKotlin = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugJava, debugKotlin]))
    getExecutionData().setFrom(
            fileTree(dir: "$buildDir", includes: [
                    "jacoco/testDebugUnitTest.exec",
                    "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
            ])
    )
}
