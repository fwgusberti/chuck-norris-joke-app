apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    compileSdkVersion buildConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion buildConfig.minSdkVersion
        targetSdkVersion buildConfig.targetSdkVersion
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        testInstrumentationRunner buildConfig.testInstrumentationRunner
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildToolsVersion buildConfig.buildToolsVersion
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {

    implementation project(':domain')
    implementation libraryDependencies.kotlin
    implementation libraryDependencies.coroutines

    // Android dependencies
    implementation androidDependencies.timber
    implementation androidDependencies.androidxCore
    implementation androidDependencies.androidxAppcompat

    // Test
    testImplementation testDependencies.junit
    testImplementation androidTestDependencies.androidxTestJunit
    testImplementation androidTestDependencies.androidxTestCore
    testImplementation androidTestDependencies.androidxArchCoreTesting
    testImplementation testDependencies.mockito
    testImplementation testDependencies.mockitoInline


    // Android Test
    androidTestImplementation testDependencies.junit
    androidTestImplementation androidTestDependencies.androidxTestJunit
    androidTestImplementation androidTestDependencies.androidxTestCore
    androidTestImplementation androidTestDependencies.androidxArchCoreTesting

    // Espresso dependencies
    androidTestImplementation androidTestDependencies.androidxTestEspressoCore
}

jacoco {
    toolVersion = jacocoVersion
}

task testPresentation(dependsOn: [':presentation:testDebugUnitTest', ':presentation:connectedDebugAndroidTest']) {
    group = 'Test'
    description = "Run presentation tests"
}

task jacocoTestReportPresentation(type: JacocoReport, dependsOn: [
        'testPresentation',
        'createDebugCoverageReport'
]) {
    group = 'Test'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugKotlin = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugKotlin]))
    getExecutionData().setFrom(
            fileTree(dir: "$buildDir", includes: [
                    "jacoco/testDebugUnitTest.exec"
            ])
    )
}