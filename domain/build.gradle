apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'jacoco'


dependencies {
    implementation libraryDependencies.kotlin

    implementation libraryDependencies.coroutines

    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    testImplementation testDependencies.mockitoInline
}

jacoco {
    toolVersion = jacocoVersion
}

task testDomain(dependsOn: [':domain:compileJava', ':domain:test']) {
    group = 'Test'
    description = "Run domain tests"
}

task jacocoTestReportDomain(type: JacocoReport, dependsOn: [
        'testDomain',
        'jacocoTestReport',
        'jacocoTestCoverageVerification'
]) {
    group = 'Test'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugJava = fileTree(dir: "${buildDir}/intermediates/classes/debugUnitTest", excludes: fileFilter)
    def debugKotlin = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugJava, debugKotlin]))
    getExecutionData().setFrom(
            fileTree(dir: "$buildDir", includes: [
                    "jacoco/testDebugUnitTest.exec",
                    "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
            ])
    )
}
